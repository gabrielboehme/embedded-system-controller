version: '3'
services:
  gateway:
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=admin
      - DB_PWD=db
      - DB_NAME=embedded-db
      - DB_SSL=disable
      - APP_PORT=8000
      - DEPLOYMENT=PROD
    build:
      context: ./gateway          # Use the current directory as the build context
      dockerfile: Dockerfile  # Dockerfile for building the Go application
    ports:
      - "8000:8000"        # Map host port to container port
    networks:
      - std-net
    depends_on:
      - db
  
  controller-app:
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=admin
      - DB_PWD=db
      - DB_NAME=embedded-db
      - DB_SSL=disable
      - APP_PORT=8000
      - DEPLOYMENT=PROD
    build:
      context: ./services/controller          # Use the current directory as the build context
      dockerfile: Dockerfile  # Dockerfile for building the Go application
    networks:
      - std-net
    depends_on:
      - db

#  logger-app:
#      environment:
#        - DB_HOST=db
#        - DB_PORT=5432
#        - DB_USER=admin
#        - DB_PWD=db
#        - DB_NAME=embedded-db
#        - DB_SSL=disable
#        - APP_PORT=8000
#        - DEPLOYMENT=PROD
#      build:
#        context: ./services/logger          # Use the current directory as the build context
#        dockerfile: Dockerfile  # Dockerfile for building the Go application
#      networks:
#        - std-net
#      depends_on:
#        - db

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: db
      POSTGRES_DB: embedded-db
    ports:
      - "5432:5432"        # Map host port to container port
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h db -p 5432 -U admin"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - std-net
    volumes:
      - db-pg-data:/var/lib/postgresql/data

networks:
  std-net:

volumes:
  db-pg-data:  # Define a named volume for PostgreSQL data